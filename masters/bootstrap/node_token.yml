---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-token
  namespace: default
  labels:
    app: node-token
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-token
  template:
    metadata:
      labels:
        app: node-token
    spec:
      # hostPath volume mounts typically end up being owned by root, and in node-token's case is not readable by the
      # nginx container's user.  To avoid needing to run the nginx container itself as root, this initContainer runs
      # as root instead and copies the token's contents to an emptyDir volume, whose contents are readable to the
      # nginx user by default (mounts as 0644).
      initContainers:
      - name: token-loader
        image: nginx:latest
        volumeMounts:
        - name: root-owned-node-token
          mountPath: /token-loader/node-token
          readOnly: true
        - name: node-token
          mountPath: /token-loader/output
        command: ["/bin/bash", "-c"]
        args:
          - |
            cd /token-loader
            cat ./node-token > ./output/node-token
        securityContext:
          runAsUser: 0
      volumes:
      - name: node-token
        hostPath:
          path: /var/lib/rancher/k3s/server/node-token
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: node-token
          mountPath: /usr/share/nginx/html/index.html
          subPath: node-token
      volumes:
      - name: root-owned-node-token
        hostPath:
          path: /var/lib/rancher/k3s/server/node-token
      - name: node-token
        emptyDir: {}
      nodeSelector:
        node-role.kubernetes.io/master: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: node-token
  namespace: default
spec:
  selector:
    app: node-token
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations: {}
  name: node-token
  namespace: default
spec:
  rules:
    - host: ${node_token_address}
      http:
        paths:
          - backend:
              service:
                name: node-token
                port:
                  number: 80
            path: /
            pathType: Prefix
