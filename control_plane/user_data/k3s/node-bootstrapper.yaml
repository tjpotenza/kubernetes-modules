---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: node-bootstrapper
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
 name: node-bootstrapper
rules:
- apiGroups: [ "" ]
  resources: [ pods/eviction ]
  verbs:     [ create ]

- apiGroups: [ apps ]
  resources: [ statefulsets, daemonsets, replicasets ]
  verbs:     [ get ]

- apiGroups: [ extensions ]
  resources: [ statefulsets, daemonsets, replicasets ]
  verbs:     [ get ]

- apiGroups: [ batch ]
  resources: [ jobs ]
  verbs:     [ get ]

- apiGroups: [ "" ]
  resources: [ nodes ]
  verbs:     [ get, patch, delete ]

- apiGroups: [ "" ]
  resources: [ pods ]
  verbs:     [ list ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-bootstrapper
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-bootstrapper
  # name: cluster-admin
subjects:
  - kind: ServiceAccount
    namespace: default
    name: node-bootstrapper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-bootstrapper
  namespace: default
  labels:
    app: node-bootstrapper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-bootstrapper
  template:
    metadata:
      labels:
        app: node-bootstrapper
    spec:
      serviceAccountName: node-bootstrapper
      # hostPath volume mounts typically end up being owned by root, and in node-token's case is not readable by the
      # nginx container's user.  To avoid needing to run the nginx container itself as root, this initContainer runs
      # as root instead and copies the token's contents to an emptyDir volume, whose contents are readable to the
      # nginx user by default (mounts as 0644).
      initContainers:
      - name: loaded
        image: nginx:latest
        volumeMounts:
        - name: node-token
          mountPath: /node-bootstrapper/node-token
          readOnly: true
        - name: outputs
          mountPath: /node-bootstrapper/outputs
        command: ["/bin/bash", "-c"]
        args:
          - |
            cd /node-bootstrapper

            cat ./node-token > ./outputs/node-token
            cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt > ./outputs/ca.crt
            cat /var/run/secrets/kubernetes.io/serviceaccount/token > ./outputs/token
            ls ./outputs > ./outputs/index.html
        securityContext:
          runAsUser: 0
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: outputs
          mountPath: /usr/share/nginx/html
      volumes:
      - name: node-token
        hostPath:
          path: /var/lib/rancher/k3s/server/node-token
      - name: outputs
        emptyDir:
          medium: Memory
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: node-bootstrapper
  namespace: default
spec:
  type: NodePort
  selector:
    app: node-bootstrapper
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30000
